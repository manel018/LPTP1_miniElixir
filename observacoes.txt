#Este arquivo deverá ser excluído posteriormente

Lista de observações e modificações a serem consideradas no código:


- SyntaticlAnalysis.java
    ❌ A constante STR está ambígua, de acordo com a mensagem do compilador.
        ✅[CORRIGIDO] A referência a essa constante foi qualificada (o nome da classe e do atributo ao qual ela pertence está precedendo-a). Sua referência agora é Token.Type.STR .
    ❌ Falta implementar os métodos:
        - procRel()  ✅[CORRIGIDO] Método implementado.
        - procRValue()
        - procList()   ✅[CORRIGIDO] Método implementado.
        - procTuple()   ✅[CORRIGIDO] Método implementado.
        - procIf()   ✅[CORRIGIDO] Método implementado.
        - procCond()   ✅[CORRIGIDO] Método implementado.
        - procFor()   ✅[CORRIGIDO] Método implementado.
        - procFn()   
        - procNative()
        - procInvoke()   ✅[CORRIGIDO] Método implementado.

    

- ListValue.java
    ❌ Não é necessário reimplementar o método toString() na classe ListValue, porque seu atributo value (da classe ListLiteral) já o implementou.
            ✅❓[CORRIGIDO] A chamada direta está sendo feita. (A versão anterior somente foi comentada)

- BinaryExpr.java
    ❌ Falta implementar os métodos internos de operações relacionais:
        - andOp()   ✅❓[CORRIGIDO] Método implementado. (O método retorna o último valor avaliado, não necessariamente :false ou :true)
        - orOp()   ✅❓[CORRIGIDO] Método implementado. (O método retorna o último valor avaliado, não necessariamente :false ou :true)
        - equalOp()   ✅[CORRIGIDO] Método implementado.
        - notEqualOp()   ✅[CORRIGIDO] Método implementado.
        - lowerThanOp()   ✅[CORRIGIDO] Método implementado.
        - greaterThanOp()   ✅[CORRIGIDO] Método implementado.
        - lowerEqualOp()   ✅[CORRIGIDO] Método implementado.
        - greaterEqualOp()   ✅[CORRIGIDO] Método implementado.
        - listSubtractOp()   ✅❓[CORRIGIDO] Método implementado. (Serve para Listas e Tuplas)
        - listConcatOp()   ✅❓[CORRIGIDO] Método implementado. (Serve para Listas e Tuplas)
        - stringConcatOp()  ✅[CORRIGIDO] Método implementado.
        - addOp()   ✅[CORRIGIDO] Método implementado.
        - subOp()   ✅[CORRIGIDO] Método implementado.
        - mulOp()   ✅[CORRIGIDO] Método implementado.
        - divOp()   ✅[CORRIGIDO] Método implementado.

- AssignExpr.java
    ❌ Falta implementar a atribuição de variáveis com sintaxe de listas.
        ✅[CORRIGIDO] O recurso foi implementado.

- miex.java
    ❌ Remover o import de Token, que foi usado só para testar o analisador léxico
    ❌ Definir output como 'false' quando for entregar o programa.
        

- interpreter/expr
    ❌ Falta implementar das classes:
        - ListExpr ✅[CORRIGIDO] Classe implementada.
        - TupleExpr   ✅[CORRIGIDO] Classe implementada.
        - TupleItem   ✅[CORRIGIDO] Classe implementada.
        - ForExpr   ✅[CORRIGIDO] Classe implementada.
        - CondExpr   ✅[CORRIGIDO] Classe implementada.
        - FunctionInvocationExpr   ✅[CORRIGIDO] Classe implementada.
            ❓ Optou-se por alterar o tipo do atributo 'args' de List<Expr> para List<Variable>, pois a regra na gramática só aceita tokens do tipo Name neste campo.
            ❓ O tipo do parâmetro do método addArg() também seguiu esta mudança,
               assim, evita-se a má prática de fazer um downcasting pressupondo, sem verificar, que o argumento Expr seja uma Variable.
        - IfExpr   ✅[CORRIGIDO] Classe implementada.


- interpreter/literal
    ❌ Falta concluir as classes:
        - FunctionLiteral   ✅❓[CORRIGIDO] Classe finalizada (O método toString() é duvidoso).
        - StandardFunctionLiteral   
        - NativeFunctionLiteral

- NativeFunctionLiteral.java
    ❌ Falta implementar o método invoke(), definindo as funções nativas:
        - puts()
        - read()
        - int()
        - str()
        - length()
        - hd()
        - t1()
        - at()
        - rem()

- interpreter/value
    ❌ Falta implementar a classe FunctionValue.
        ✅[CORRIGIDO] A classe foi criada.